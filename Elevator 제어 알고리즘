import json
import time

# 엘리베이터 수용 가능 인원 설정
capacity_per_elevator = 15  # 엘리베이터 당 수용 가능 인원

# 외부 인원 수 파일 경로
external_people_count_file = 'external_people_count.txt'

# 내부 인원 수 확인 함수
def read_people_count(file_path):
    try:
        with open(file_path, 'r') as f:
            lines = f.readlines()
            last_line = lines[-1] if lines else '0: 0\n'
            count_str = last_line.split(': ')[-1].strip()
            return int(count_str)
    except (FileNotFoundError, IndexError, ValueError) as e:
        print(f"Error reading {file_path}: {e}")
    
    return 0

# 외부 인원 수 확인 함수
def read_external_people_count(file_path):
    try:
        with open(file_path, 'r') as f:
            people_count = int(f.read().strip())
            return people_count
    except (FileNotFoundError, ValueError) as e:
        print(f"Error reading external people count file: {e}")
    return 0

# 실시간 외부 사람 수와 내부 인원 수를 참고하여 엘리베이터 호출
def call_elevators_based_on_people_counts(external_people_count, elevator_counts, requested_elevator=None):
    remaining_people = external_people_count
    
    # 요청된 엘리베이터 우선 고려
    if requested_elevator and elevator_counts[requested_elevator - 1] < capacity_per_elevator:
        print(f"우선적으로 엘리베이터 {requested_elevator} 호출 (현재 인원: {elevator_counts[requested_elevator - 1]})")
        remaining_people -= (capacity_per_elevator - elevator_counts[requested_elevator - 1])
    
    # 빈 자리가 있는 엘리베이터 확인
    available_elevators = [(i + 1, capacity_per_elevator - count) for i, count in enumerate(elevator_counts) if count < capacity_per_elevator]
    
    # 가용한 엘리베이터가 있을 경우
    if available_elevators:
        print(f"빈 자리가 있는 엘리베이터: {available_elevators}")
        selected_elevators = []
        
        for elevator_id, available_space in sorted(available_elevators, key=lambda x: x[1], reverse=True):
            if remaining_people <= 0:
                break
            if available_space > 0:
                selected_elevators.append(elevator_id)
                people_to_board = min(remaining_people, available_space)
                remaining_people -= people_to_board
                print(f"엘리베이터 {elevator_id} 호출 (탑승 가능 인원: {people_to_board}, 남은 대기 인원: {remaining_people})")
        
        if remaining_people > 0:
            print(f"모든 엘리베이터를 호출하였지만, {remaining_people}명이 대기 중입니다.")
    else:
        # 모든 엘리베이터가 만석일 경우, 가장 적게 차 있는 엘리베이터 호출
        selected_elevator = min(range(1, 4), key=lambda x: elevator_counts[x - 1])
        print(f"모든 엘리베이터가 만석입니다. 엘리베이터 {selected_elevator} 호출 (현재 인원: {elevator_counts[selected_elevator - 1]})")

# 호출 루프
while True:
    # 사용자로부터 호출할 엘리베이터 번호 입력받기
    user_input = input("호출할 엘리베이터 번호를 입력하세요 (1, 2, 3) 또는 '없음'을 입력: ").strip()
    requested_elevator = int(user_input) if user_input.isdigit() and user_input in ['1', '2', '3'] else None

    # 외부 인원 수 읽기
    external_people_count = read_external_people_count(external_people_count_file)
    
    # 내부 인원 수 리스트
    elevator_counts = [
        read_people_count('c:\\Users\\USER\\AppData\\Roaming\\jupyter\\runtime\\people_count1.txt'),
        read_people_count('c:\\Users\\USER\\AppData\\Roaming\\jupyter\\runtime\\people_count2.txt'),
        read_people_count('c:\\Users\\USER\\AppData\\Roaming\\jupyter\\runtime\\people_count3.txt')
    ]
    
    # 엘리베이터 호출 함수 실행
    call_elevators_based_on_people_counts(external_people_count, elevator_counts, requested_elevator)
    
    # 5초마다 확인 (조정 가능)
    time.sleep(5)
